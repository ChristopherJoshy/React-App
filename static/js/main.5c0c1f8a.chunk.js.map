{"version":3,"sources":["components/Home.js","components/Timer.js","components/Quiz.js","App.js","index.js"],"names":["Home","_ref","startQuiz","loading","setLoading","useState","React","createElement","className","onClick","async","response","fetch","formattedQuestions","questions","json","results","map","q","question","answers","incorrect_answers","correct_answer","sort","correct","error","console","Timer","timeSpent","Quiz","data","onFinish","setScore","setTimeSpent","currentQuestionIndex","setCurrentQuestionIndex","setQuizTimeSpent","isAnswered","setIsAnswered","animationClass","setAnimationClass","correctSound","Howl","src","incorrectSound","handleNextQuestion","setTimeout","length","prevIndex","useEffect","timer","setInterval","prevTime","clearInterval","answer","index","key","prevScore","play","handleAnswer","disabled","App","quizStarted","setQuizStarted","quizData","setQuizData","showResult","setShowResult","score","backgroundMusic","setBackgroundMusic","music","loop","volume","stop","finishQuiz","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"yJAkCeA,MAhCFC,IAAmB,IAAlBC,UAAEA,GAAWD,EACvB,MAAOE,EAASC,GAAcC,oBAAS,GAqBvC,OACIC,IAAAC,cAAA,OAAKC,UAAU,iBACXF,IAAAC,cAAA,UAAI,2BACHJ,EAAUG,IAAAC,cAAA,SAAG,wBACVD,IAAAC,cAAA,UAAQC,UAAU,eAAeC,QAvBrBC,UACpBN,GAAW,GACX,IACI,MAAMO,QAAiBC,MAAM,uDAEvBC,EAAqB,CACvBC,iBAFeH,EAASI,QAERC,QAAQC,IAAIC,IAAC,CACzBC,SAAUD,EAAEC,SACZC,QAAS,IAAIF,EAAEG,kBAAmBH,EAAEI,gBAAgBC,OACpDC,QAASN,EAAEI,mBAGnBpB,EAAUW,GACZ,MAAOY,GACLC,QAAQD,MAAM,iCAAkCA,GAEpDrB,GAAW,KAOwD,gBClB5DuB,MARD1B,IAAmB,IAAlB2B,UAAEA,GAAW3B,EACxB,OACIK,IAAAC,cAAA,OAAKC,UAAU,SACXF,IAAAC,cAAA,SAAG,eAAaqB,EAAU,qBCiEvBC,MAlEF5B,IAAgD,IAA/C6B,KAAEA,EAAIC,SAAEA,EAAQC,SAAEA,EAAQC,aAAEA,GAAchC,EACpD,MAAOiC,EAAsBC,GAA2B9B,mBAAS,IAC1DuB,EAAWQ,GAAoB/B,mBAAS,IACxCgC,EAAYC,GAAiBjC,oBAAS,IACtCkC,EAAgBC,GAAqBnC,mBAAS,IAE/CoC,EAAe,IAAIC,OAAK,CAC1BC,IAAK,CAAC,mCAGJC,EAAiB,IAAIF,OAAK,CAC5BC,IAAK,CAAC,qCAiBJE,EAAqBA,KACvBL,EAAkB,YAClBM,WAAW,KACPN,EAAkB,IACdN,EAAuBJ,EAAKhB,UAAUiC,OAAS,GAC/CZ,EAAwBa,GAAaA,EAAY,GACjDV,GAAc,IAEdP,KAEL,MAYP,OATAkB,oBAAU,KACN,MAAMC,EAAQC,YAAY,KACtBf,EAAiBgB,GAAYA,EAAW,GACxCnB,EAAamB,GAAYA,EAAW,IACrC,KAEH,MAAO,IAAMC,cAAcH,IAC5B,CAACjB,IAGA3B,IAAAC,cAAA,OAAKC,2BAA4B+B,KAC7BjC,IAAAC,cAAA,UAAI,YAAU2B,EAAuB,EAAE,IAAEJ,EAAKhB,UAAUiC,QACxDzC,IAAAC,cAAA,SAAIuB,EAAKhB,UAAUoB,GAAsBf,UACzCb,IAAAC,cAACoB,EAAK,CAACC,UAAWA,IAClBtB,IAAAC,cAAA,OAAKC,UAAU,WACVsB,EAAKhB,UAAUoB,GAAsBd,QAAQH,IAAI,CAACqC,EAAQC,IACvDjD,IAAAC,cAAA,UAAQiD,IAAKD,EAAO9C,QAASA,IA3CvB6C,KACdjB,IACJC,GAAc,GAEVgB,IAAWxB,EAAKhB,UAAUoB,GAAsBV,SAChDQ,EAASyB,GAAaA,EAAY,GAClChB,EAAaiB,QAEbd,EAAec,OAGnBb,MAgC+Cc,CAAaL,GAASM,SAAUvB,GAC9DiB,OCEVO,MA3DHA,KACR,MAAOC,EAAaC,GAAkB1D,oBAAS,IACxC2D,EAAUC,GAAe5D,mBAAS,OAClC6D,EAAYC,GAAiB9D,oBAAS,IACtC+D,EAAOpC,GAAY3B,mBAAS,IAC5BuB,EAAWK,GAAgB5B,mBAAS,IACpCgE,EAAiBC,GAAsBjE,mBAAS,MAEvD4C,oBAAU,KACN,MAAMsB,EAAQ,IAAI7B,OAAK,CACnBC,IAAK,CAAC,oCACN6B,MAAM,EACNC,OAAQ,KAGZ,OADAH,EAAmBC,GACZ,KACHA,EAAMG,SAEX,IAcH,OACIpE,IAAAC,cAAA,OAAKC,UAAU,OACTsD,EAEEI,EACA5D,IAAAC,cAAA,OAAKC,UAAU,mBACXF,IAAAC,cAAA,UAAI,mBACJD,IAAAC,cAAA,SAAG,eAAa6D,GAChB9D,IAAAC,cAAA,SAAG,eAAaqB,EAAU,YAC1BtB,IAAAC,cAAA,UAAQE,QAASA,KACbsD,GAAe,GACfI,GAAc,GACdnC,EAAS,KACV,iBAGP1B,IAAAC,cAACsB,EAAI,CACDC,KAAMkC,EACNjC,SAvBG4C,KACfN,EAAgBK,OAChBP,GAAc,IAsBFnC,SAAUA,EACVC,aAAcA,IAjBlB3B,IAAAC,cAACP,EAAI,CAACE,UAfC4B,IACfmC,EAAYnC,GACZiC,GAAe,GACfM,EAAgBX,OAChBzB,EAAa,cCxBR2C,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH1E,IAAAC,cAACD,IAAM2E,WAAU,KACf3E,IAAAC,cAACsD,EAAG","file":"static/js/main.5c0c1f8a.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst Home = ({ startQuiz }) => {\n    const [loading, setLoading] = useState(false);\n\n    const handleStartQuiz = async () => {\n        setLoading(true);\n        try {\n            const response = await fetch('https://opentdb.com/api.php?amount=10&type=multiple');\n            const data = await response.json();\n            const formattedQuestions = {\n                questions: data.results.map(q => ({\n                    question: q.question,\n                    answers: [...q.incorrect_answers, q.correct_answer].sort(), // Shuffle answers\n                    correct: q.correct_answer,\n                })),\n            };\n            startQuiz(formattedQuestions);\n        } catch (error) {\n            console.error('Error fetching quiz questions:', error);\n        }\n        setLoading(false);\n    };\n\n    return (\n        <div className=\"home animated\">\n            <h1>Welcome to the Quiz App</h1>\n            {loading ? <p>Loading questions...</p> : (\n                <button className=\"start-button\" onClick={handleStartQuiz}>Start Quiz</button>\n            )}\n        </div>\n    );\n};\n\nexport default Home;\n","import React from 'react';\n\nconst Timer = ({ timeSpent }) => {\n    return (\n        <div className=\"timer\">\n            <p>Time spent: {timeSpent} seconds</p>\n        </div>\n    );\n};\n\nexport default Timer;\n","import React, { useState, useEffect } from 'react';\nimport Timer from './Timer';\nimport { Howl } from 'howler';\n\nconst Quiz = ({ data, onFinish, setScore, setTimeSpent }) => {\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [timeSpent, setQuizTimeSpent] = useState(0);\n    const [isAnswered, setIsAnswered] = useState(false);\n    const [animationClass, setAnimationClass] = useState('');\n\n    const correctSound = new Howl({\n        src: [`${process.env.PUBLIC_URL}/sounds/correct.mp3`],\n    });\n\n    const incorrectSound = new Howl({\n        src: [`${process.env.PUBLIC_URL}/sounds/incorrect.mp3`],\n    });\n\n    const handleAnswer = (answer) => {\n        if (isAnswered) return;\n        setIsAnswered(true);\n\n        if (answer === data.questions[currentQuestionIndex].correct) {\n            setScore(prevScore => prevScore + 1);\n            correctSound.play();\n        } else {\n            incorrectSound.play();\n        }\n\n        handleNextQuestion();\n    };\n\n    const handleNextQuestion = () => {\n        setAnimationClass('fade-out');\n        setTimeout(() => {\n            setAnimationClass('');\n            if (currentQuestionIndex < data.questions.length - 1) {\n                setCurrentQuestionIndex(prevIndex => prevIndex + 1);\n                setIsAnswered(false);\n            } else {\n                onFinish();\n            }\n        }, 300);\n    };\n\n    useEffect(() => {\n        const timer = setInterval(() => {\n            setQuizTimeSpent(prevTime => prevTime + 1);\n            setTimeSpent(prevTime => prevTime + 1);\n        }, 1000);\n\n        return () => clearInterval(timer);\n    }, [setTimeSpent]);\n\n    return (\n        <div className={`quiz animated ${animationClass}`}>\n            <h2>Question {currentQuestionIndex + 1}/{data.questions.length}</h2>\n            <p>{data.questions[currentQuestionIndex].question}</p>\n            <Timer timeSpent={timeSpent} />\n            <div className=\"choices\">\n                {data.questions[currentQuestionIndex].answers.map((answer, index) => (\n                    <button key={index} onClick={() => handleAnswer(answer)} disabled={isAnswered}>\n                        {answer}\n                    </button>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Quiz;\n","import React, { useState, useEffect } from 'react';\nimport Home from './components/Home';\nimport Quiz from './components/Quiz';\nimport { Howl } from 'howler';\n\nconst App = () => {\n    const [quizStarted, setQuizStarted] = useState(false);\n    const [quizData, setQuizData] = useState(null);\n    const [showResult, setShowResult] = useState(false);\n    const [score, setScore] = useState(0);\n    const [timeSpent, setTimeSpent] = useState(0);\n    const [backgroundMusic, setBackgroundMusic] = useState(null);\n\n    useEffect(() => {\n        const music = new Howl({\n            src: [`${process.env.PUBLIC_URL}/sounds/background.mp3`],\n            loop: true,\n            volume: 0.5,\n        });\n        setBackgroundMusic(music);\n        return () => {\n            music.stop();\n        };\n    }, []);\n\n    const startQuiz = (data) => {\n        setQuizData(data);\n        setQuizStarted(true);\n        backgroundMusic.play();\n        setTimeSpent(0);\n    };\n\n    const finishQuiz = () => {\n        backgroundMusic.stop();\n        setShowResult(true);\n    };\n\n    return (\n        <div className=\"App\">\n            {!quizStarted ? (\n                <Home startQuiz={startQuiz} />\n            ) : showResult ? (\n                <div className=\"result animated\">\n                    <h2>Quiz Completed!</h2>\n                    <p>Your score: {score}</p>\n                    <p>Time spent: {timeSpent} seconds</p>\n                    <button onClick={() => {\n                        setQuizStarted(false);\n                        setShowResult(false);\n                        setScore(0);\n                    }}>Restart Quiz</button>\n                </div>\n            ) : (\n                <Quiz\n                    data={quizData}\n                    onFinish={finishQuiz}\n                    setScore={setScore}\n                    setTimeSpent={setTimeSpent}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport './styles.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}